Apply Flexbox to Body
body {
  display: flex;
  justify-content: center;  /* Horizontally centers the content */
  align-items: center;  /* Vertically centers the content */
  height: 100vh;  /* Ensure body takes up full viewport height */
  margin: 0;  /* Remove default body margin */
}

/* Signup Container */
.signup-container {
  width: 500px;
  height: 618px;
  border-radius: 8px;  /* Curved borders */
  background: var(--Button-Text, #E6EEF2);
  display: flex;
  flex-direction: column;  /* Stack children vertically */
  align-items: center;  /* Center children horizontally */
  justify-content: center;  /* Center children vertically */
  padding: 20px;  /* Optional: Adds padding inside the container */
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);  /* Optional: Adds a subtle shadow */
}




//.......................................



/* Signup Container */
.signup-container {
  width: 500px;
  height: 618px;
  position: absolute;
  top: 220px;
  left: 470px;
  /* gap: 0px; */
  border-radius: 8px 8px 8px 8px;
  background: var(--Button-Text, #E6EEF2);
  /* opacity: 0px; */
}



/* Signup Title */
.signup-title {
  width: 155px;
  height: 56px;
  position: absolute;
  top: 40px;
  left: 173px;
  font-family: 'Righteous';
  font-size: 45px;
  font-weight: bold;
  line-height: 55.88px;
  letter-spacing: 0.05em;
  text-align: left;
  color: var(--Primary-Color, #06334D);
  /* opacity: 0px; */
}

/* Text Fields */
.signup-input {
  width: 328px;
  height: 48px;
  position: absolute;
  top: 120px;
  left: 86px;
  padding: 8px 16px;
  gap: 10px;
  border-radius: 8px 0px 0px 0px;
  border: 1px solid var(--Blue-Fade-3, #97B4CC);
  opacity: 0px;
  box-sizing: border-box;
}

/* Signup Button */
.signup-button {
  width: 328px;
  height: 48px;
  position: absolute;
  top: 404px;
  left: 86px;
  gap: 0px;
  opacity: 0px;
  background: var(--Primary-Color, #06334D);
  color: white;
  border: none;
  cursor: pointer;
  border-radius: 8px;
}

/* Line Under Button */
.signup-underline {
  width: 328px;
  height: 14px;
  position: absolute;
  top: 484px;
  left: 86px;
  gap: 0px;
  opacity: 0px;
  background: var(--Blue-Fade-3, #97B4CC);
}

/* Redirect Button to Login */
.login-redirect-button {
  width: 328px;
  height: 48px;
  position: absolute;
  top: 530px;
  left: 86px;
  padding: 8px 16px;
  gap: 10px;
  border-radius: 8px 0px 0px 0px;
  border: 1px solid var(--Primary-Color, #06334D);
  background: var(--Button-Text, #E6EEF2);
  color: var(--Primary-Color, #06334D);
  cursor: pointer;
  opacity: 0px;
}



//-----------------------------------------------------//

// src/components/Home.tsx
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import { v4 as uuidv4 } from 'uuid';
import Navbar from '../Navbar/Navbar';
import axiosInstance from '../../services/axiosInstance';
import './Home.css';
import { Socket } from 'socket.io-client';

// Define the type for the received message
interface Message {
  from: string;
  message: string;
}

// Define the type for the users object
interface Users {
  [username: string]: string; // Maps username to socket ID
}

const Home: React.FC = () => {
  const [username] = useState<string>(uuidv4());
  const [message, setMessage] = useState<string>('');
  const [recipient, setRecipient] = useState<string>('');
  const [receivedMessages, setReceivedMessages] = useState<Message[]>([]);
  const [users, setUsers] = useState<Users>({});
  const [socket, setSocket] = useState<Socket>();

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axiosInstance.get('/api/users/names');
        console.log(`user ${response.data}`);
        const usersList = response.data;
        const usersObject: Users = {};
        usersList.forEach((user: { username: string }) => {
          usersObject[user.username] = ''; // Add username with an empty socket ID
        });
        setUsers(usersObject);
        
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };

    fetchUsers();

    const socket = io('http://localhost:3000');
    setSocket(socket);
    socket.emit('register', username);

    socket.on('update_users', (usersList: string[]) => {
      const usersObject: Users = {};
      usersList.forEach(user => {
        usersObject[user] = ''; // Add username with an empty socket ID
      });
      setUsers(usersObject);
    });

    socket.on('receive_message', (data: Message) => {
      setReceivedMessages(prevMessages => [...prevMessages, data]);
    });

    return () => {
      socket.off('update_users');
      socket.off('receive_message');
    };
  }, [username]);

  const handleSendMessage = () => {
    if (username.trim() && recipient.trim() && message.trim() && socket) {
      socket.emit('send_message', JSON.stringify({ from: username, to: recipient, message }));
      setMessage('');
    }
  };

  return (
    <div className="home-container">
      <div className="sidebar">
        <Navbar users={users} />
      </div>
      <div className="main-content">
        <h1>Socket.IO Messaging</h1>

        <div>
          <h2>Send Message</h2>
          <input
            type="text"
            placeholder="Recipient username"
            value={recipient}
            onChange={(e) => setRecipient(e.target.value)}
          />
          <input
            type="text"
            placeholder="Message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <button onClick={handleSendMessage}>Send Message</button>
        </div>

        <div>
          <h2>Received Messages</h2>
          <ul>
            {receivedMessages.map((msg, index) => (
              <li key={index}>
                <strong>{msg.from}:</strong> {msg.message}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Home;

//----------------------------------------------------//


import { Server, Socket } from 'socket.io';
import {  Users } from '../interfaces/user'

const users: Users = {};

export const setupSocket = (io: Server) => {
    io.on('connection', (socket: Socket) => {
        console.log(`User connected: ${socket.id}`);

        socket.on('register', (data) => {
            try {
                const { userId } = data;
                if (typeof userId !== 'number') return;

                users[userId] = { socketId: socket.id, status: 'active' };

                io.emit('update_users', Object.keys(users).map(id => ({
                    id: Number(id),
                    username: `User ${id}`,
                    active: users[Number(id)].status === 'active',
                })));
            } catch (error) {
                console.error('Error processing registration:', error);
            }
        });

        socket.on('send_message', (data: any) => {
            try {
              const { fromId, toId, message } = data;
              if (typeof fromId !== 'number' || typeof toId !== 'number' || typeof message !== 'string') return;
          
              const created_at = new Date().toISOString();
              const messageData = { fromId, toId, message, created_at };
          
              const recipientSocketId = users[toId]?.socketId;
              const senderSocketId = users[fromId]?.socketId;
          
              if (recipientSocketId) {
                io.to(recipientSocketId).emit('receive_message', messageData);
              }
          
              if (senderSocketId) {
                io.to(senderSocketId).emit('receive_message', messageData);
              }
            } catch (error) {
              console.error('Error processing message:', error);
            }
          });
          

        socket.on('disconnect', () => {
            console.log(`User disconnected: ${socket.id}`);
            Object.keys(users).forEach(userId => {
                if (users[Number(userId)].socketId === socket.id) {
                    delete users[Number(userId)];
                }
            });
            io.emit('update_users', Object.keys(users).map(id => ({
                id: Number(id),
                username: `User ${id}`,
                active: users[Number(id)].status === 'active',
            })));
        });
    });
};

